require 'turnip/node/scenario_group_definition'

module Turnip
  module Node
    #
    # @note Rule metadata generated by Gherkin
    #
    #     {
    #       type: :Rule,
    #       location: { line: 10, column: 3 },
    #       keyword: 'Rule',
    #       name: 'Rule name',
    #       description: 'Rule description',
    #       children: [] # Array of Background, Scenario and Scenario Outline
    #     }
    #
    class Rule < ScenarioGroupDefinition
      def children
        @children ||= @raw[:children].map do |child|
          unless child[:background].nil?
            next Background.new(child[:background])
          end

          unless child[:scenario].nil?
            klass = child.dig(:scenario, :examples).empty? ? Scenario : ScenarioOutline
            next klass.new(child[:scenario])
          end
        end.compact
      end
    end
  end
end
